---
import { renderMedia, renderRichText } from '../../astro-utils/mediaUtils';

interface Props {
  section: any;
}

const { section } = Astro.props;
---

<section class="content-section" id="phones-section">
  <div class="grid grid-cols-12 gap-6 px-grid">
    {/* Text content on the left */}
    <div class="col-start-1 col-end-4">
      <div id="phones-text">
        {section.Body && (
          <div class="text-lg leading-relaxed text-ink-text-cream" data-animate="fade-up" set:html={renderRichText(section.Body)} />
        )}
      </div>
    </div>
    
    {/* Multiple media assets on the right */}
    <div class="col-start-6 col-span-7">
      {(() => {
        let mediaAssets = section.MediaAsset;
        if (mediaAssets?.data) {
          mediaAssets = Array.isArray(mediaAssets.data) ? mediaAssets.data : [mediaAssets.data];
        } else if (mediaAssets && !Array.isArray(mediaAssets)) {
          mediaAssets = [mediaAssets];
        }
        if (mediaAssets && Array.isArray(mediaAssets) && mediaAssets.length > 0) {
          return (
            <div class="grid grid-cols-12 gap-6">
              <div class="col-start-1 col-span-6">
                {mediaAssets.filter((_, index) => index % 2 === 0).map((asset: any, index: number) => {
                  let mediaAsset = asset;
                  if (asset?.attributes) mediaAsset = asset.attributes;
                  else if (asset?.data?.attributes) mediaAsset = asset.data.attributes;
                  else if (asset?.data) mediaAsset = asset.data;
                  if (mediaAsset && mediaAsset.url) {
                    return (
                      <div class="w-full lg:w-[320px] rounded-[20px] overflow-hidden mb-60">
                        <div set:html={renderMedia(mediaAsset, "w-full h-auto object-cover")} />
                      </div>
                    );
                  } else {
                    return <div class="text-red-500">Media asset missing</div>;
                  }
                })}
              </div>
              <div class="col-start-7 col-span-6 pt-64 flex flex-col items-end">
                {mediaAssets.filter((_, index) => index % 2 === 1).map((asset: any, index: number) => {
                  let mediaAsset = asset;
                  if (asset?.attributes) mediaAsset = asset.attributes;
                  else if (asset?.data?.attributes) mediaAsset = asset.data.attributes;
                  else if (asset?.data) mediaAsset = asset.data;
                  if (mediaAsset && mediaAsset.url) {
                    return (
                      <div class="w-full lg:w-[320px] rounded-[20px] overflow-hidden mb-60">
                        <div set:html={renderMedia(mediaAsset, "w-full h-auto object-cover")} />
                      </div>
                    );
                  } else {
                    return <div class="text-red-500">Media asset missing</div>;
                  }
                })}
              </div>
            </div>
          );
        } else {
          return <div class="text-red-500">No media assets found for phones section ID: {section.id}</div>;
        }
      })()}
    </div>
  </div>
</section> 